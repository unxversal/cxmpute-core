const fs = require('fs');
const path = require('path');

// Input and output paths
const docsDir = path.join(__dirname, '../public/docs');
const outputJsonFile = path.join(__dirname, '../src/lib/docs-content.json');
const outputTsFile = path.join(__dirname, '../src/lib/docs-content.ts');

function convertMarkdownToJson() {
  try {
    // Create src/lib directory if it doesn't exist
    const libDir = path.dirname(outputJsonFile);
    if (!fs.existsSync(libDir)) {
      fs.mkdirSync(libDir, { recursive: true });
    }

    // Read all markdown files from docs directory
    const docs = {};
    const files = fs.readdirSync(docsDir);
    
    files.forEach(file => {
      if (file.endsWith('.md')) {
        const filePath = path.join(docsDir, file);
        const content = fs.readFileSync(filePath, 'utf8');
        const key = file.replace('.md', '');
        docs[key] = content;
      }
    });

    // Write JSON file
    fs.writeFileSync(outputJsonFile, JSON.stringify(docs, null, 2));
    console.log('‚úÖ Successfully converted markdown files to JSON');
    return docs;
  } catch (error) {
    console.error('‚ùå Error converting markdown to JSON:', error);
    process.exit(1);
  }
}

function convertJsonToTs(docsData) {
  try {
    // Generate TypeScript content
    const tsContent = `// Auto-generated documentation content
// Do not edit this file directly - run 'npm run build:docs' to regenerate

export const docsContent: Record<string, string> = ${JSON.stringify(docsData, null, 2)};

export default docsContent;
`;

    // Write the TypeScript file
    fs.writeFileSync(outputTsFile, tsContent);
    
    console.log('‚úÖ Successfully converted docs to TypeScript');
    console.log(`üìÑ Output: ${outputTsFile}`);
    
  } catch (error) {
    console.error('‚ùå Error converting to TypeScript:', error);
    process.exit(1);
  }
}

// Run the conversion pipeline
console.log('üîÑ Starting docs conversion...');
const docsData = convertMarkdownToJson();
convertJsonToTs(docsData);
console.log('‚ú® Conversion complete!') 