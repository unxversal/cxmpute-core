openapi: 3.1.0
info:
  title: Decentralized Compute Network – Public API
  version: "2025-04-26"
  description: >
    REST+SSE interface for embeddings, chat completions (OpenAI-compatible), image &
    video generation, vision-language (“Moon”) tasks, and text-to-speech.

servers:
  - url: https://{host}
    description: Production router
    variables:
      host:
        default: api.my-net.io

security:
  - bearerAuth: []

paths:
  /api/v1/embeddings:
    post:
      summary: Generate text embeddings
      operationId: createEmbeddings
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EmbeddingsRequest' }
      responses:
        '200':
          description: JSON array of embedding vectors
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmbeddingsResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/chat/completions:
    post:
      summary: OpenAI-compatible chat completions
      operationId: createChatCompletion
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [model, messages]
              additionalProperties: true    # accept any OpenAI fields
              properties:
                model:    { type: string }
                messages: { type: array, items: { type: object } }
      responses:
        '200':
          description: Chat completion object (OpenAI format)
          content:
            application/json:
              schema: { type: object }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/image:
    post:
      summary: Text-to-image (PNG, Stable Diffusion)
      operationId: createImage
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ImageRequest' }
      responses:
        '200':
          description: PNG stream
          content:
            image/png:
              schema: { type: string, format: binary }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/video:
    post:
      summary: Text-to-video (Wan T2V 1.3 B)
      operationId: createVideo
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VideoRequest' }
      responses:
        '200':
          description: MP4 stream
          content:
            video/mp4:
              schema: { type: string, format: binary }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/tts:
    post:
      summary: Text-to-speech (WAV, Kokoro 82 M)
      operationId: synthesizeSpeech
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TtsRequest' }
      responses:
        '200':
          description: WAV stream
          content:
            audio/wav:
              schema: { type: string, format: binary }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/m/caption:
    post: &MoonOp
      summary: Image captioning
      operationId: captionImage
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CaptionRequest' }
      responses: &MoonResponses
        '200':
          description: Caption text
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CaptionResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
        '500': { $ref: '#/components/responses/InternalError' }

  /api/v1/m/detect:
    post:
      <<: *MoonOp
      summary: Object detection
      operationId: detectObjects
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DetectRequest' }
      responses:
        '200':
          description: Detected objects
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DetectResponse' }
        <<: *MoonResponses

  /api/v1/m/point:
    post:
      <<: *MoonOp
      summary: Object centroid points
      operationId: pointObjects
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PointRequest' }
      responses:
        '200':
          description: Array of (x,y) points
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PointResponse' }
        <<: *MoonResponses

  /api/v1/m/query:
    post:
      <<: *MoonOp
      summary: Visual question answering
      operationId: queryImage
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/QueryRequest' }
      responses:
        '200':
          description: Free-form answer
          content:
            application/json:
              schema: { $ref: '#/components/schemas/QueryResponse' }
        <<: *MoonResponses

components:
  ####################################
  #  SCHEMAS
  ####################################
  schemas:

    EmbeddingsRequest:
      type: object
      required: [model, input]
      additionalProperties: true
      properties:
        model:      { type: string }
        input:      { oneOf: [{ type: string }, { type: array, items: { type: string } }] }
        truncate:   { type: boolean }
        keep_alive: { oneOf: [{ type: string }, { type: number }] }

    EmbeddingsResponse:
      type: object
      properties:
        model:             { type: string }
        embeddings:        { type: array, items: { type: array, items: { type: number } } }
        total_duration:    { type: number }
        load_duration:     { type: number }
        prompt_eval_count: { type: number }

    VideoRequest:
      type: object
      required: [prompt, size]
      additionalProperties: true
      properties:
        prompt:             { type: string }
        size:               { type: string, pattern: '^[0-9]+\\*[0-9]+$' }
        ckpt_dir:           { type: string }
        sample_shift:       { type: integer }
        sample_guide_scale: { type: number }
        offload_model:      { type: boolean }
        t5_cpu:             { type: boolean }

    ImageRequest:
      type: object
      required: [prompt]
      additionalProperties: true
      properties:
        prompt:            { type: string }
        negativePrompt:    { type: string }
        numInferenceSteps: { type: integer, minimum: 1 }
        width:             { type: integer, minimum: 64 }
        height:            { type: integer, minimum: 64 }

    #  – Moon shared –
    ImageInput:
      oneOf:
        - type: object
          required: [imageUrl]
          properties: { imageUrl: { type: string, format: uri } }
        - type: object
          required: [imageBase64]
          properties: { imageBase64: { type: string } }
        - type: object
          required: [imageUint8]
          properties:
            imageUint8:
              type: array
              items: { type: integer, minimum: 0, maximum: 255 }

    CaptionRequest:
      allOf:
        - $ref: '#/components/schemas/ImageInput'
        - type: object
          properties:
            length: { type: string, enum: [short, normal, long] }

    CaptionResponse:
      type: object
      properties:
        caption: { type: string }

    DetectRequest:
      allOf:
        - $ref: '#/components/schemas/ImageInput'
        - type: object
          required: [target]
          properties:
            target: { type: string }

    DetectedObject:
      type: object
      properties:
        label:      { type: string }
        box:        { type: array, items: { type: number }, minItems: 4, maxItems: 4 }
        confidence: { type: number }

    DetectResponse:
      type: object
      properties:
        objects:
          type: array
          items: { $ref: '#/components/schemas/DetectedObject' }

    PointRequest:
      allOf:
        - $ref: '#/components/schemas/DetectRequest'

    PointResponse:
      type: object
      properties:
        points:
          type: array
          items:
            type: object
            properties:
              x: { type: number }
              y: { type: number }

    QueryRequest:
      allOf:
        - $ref: '#/components/schemas/ImageInput'
        - type: object
          required: [question]
          properties:
            question: { type: string }

    QueryResponse:
      type: object
      properties:
        answer: { type: string }

    TtsRequest:
      type: object
      required: [text]
      additionalProperties: true
      properties:
        text:  { type: string }
        voice: { type: string, default: af_bella }

    ErrorResponse:
      type: object
      properties:
        error: { type: string }

  ####################################
  #  RESPONSES
  ####################################
  responses:
    BadRequest:
      description: Invalid request payload
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

    Unauthorized:
      description: Missing or invalid API key
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

    ServiceUnavailable:
      description: No healthy provision available
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }

  ####################################
  #  SECURITY SCHEMES
  ####################################
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
=