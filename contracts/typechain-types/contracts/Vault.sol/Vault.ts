/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CORE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "GATEWAY_ROLE"
      | "cxptToken"
      | "depositSynthToVault"
      | "depositUSDC"
      | "exchangeSAssetToUSDC"
      | "exchangeUSDCToSAsset"
      | "getCXPTTokenAddress"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMembers"
      | "getUSDCTokenAddress"
      | "grantRole"
      | "hasRole"
      | "isRegisteredSynth"
      | "recordFees"
      | "registerSynth"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "totalFeesCollectedUSDC"
      | "usdcToken"
      | "withdraw"
      | "withdrawFees"
      | "withdrawSynthFromVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositedUSDC"
      | "FeesRecorded"
      | "FeesWithdrawn"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SAssetToUSDCExchanged"
      | "SynthDepositedToVault"
      | "SynthRegistered"
      | "SynthWithdrawnFromVault"
      | "USDCToSAssetExchanged"
      | "WithdrawnCXPT"
      | "WithdrawnUSDC"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CORE_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GATEWAY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cxptToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositSynthToVault",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeSAssetToUSDC",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeUSDCToSAsset",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCXPTTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDCTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredSynth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSynth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollectedUSDC",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSynthFromVault",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CORE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GATEWAY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cxptToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSynthToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeSAssetToUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeUSDCToSAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCXPTTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollectedUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSynthFromVault",
    data: BytesLike
  ): Result;
}

export namespace DepositedUSDCEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    usdcAmount: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesRecordedEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    usdcFeeAmount: BigNumberish
  ];
  export type OutputTuple = [coreAddress: string, usdcFeeAmount: bigint];
  export interface OutputObject {
    coreAddress: string;
    usdcFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [
    admin: AddressLike,
    to: AddressLike,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [admin: string, to: string, usdcAmount: bigint];
  export interface OutputObject {
    admin: string;
    to: string;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SAssetToUSDCExchangedEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    sAssetContract: AddressLike,
    sAssetAmountBurned: BigNumberish,
    usdcAmountReceived: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    sAssetContract: string,
    sAssetAmountBurned: bigint,
    usdcAmountReceived: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    sAssetContract: string;
    sAssetAmountBurned: bigint;
    usdcAmountReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SynthDepositedToVaultEvent {
  export type InputTuple = [
    userWallet: AddressLike,
    synthContract: AddressLike,
    sAssetAmount: BigNumberish
  ];
  export type OutputTuple = [
    userWallet: string,
    synthContract: string,
    sAssetAmount: bigint
  ];
  export interface OutputObject {
    userWallet: string;
    synthContract: string;
    sAssetAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SynthRegisteredEvent {
  export type InputTuple = [registrar: AddressLike, synthContract: AddressLike];
  export type OutputTuple = [registrar: string, synthContract: string];
  export interface OutputObject {
    registrar: string;
    synthContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SynthWithdrawnFromVaultEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    synthContract: AddressLike,
    sAssetAmount: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    synthContract: string,
    sAssetAmount: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    synthContract: string;
    sAssetAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCToSAssetExchangedEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    sAssetContract: AddressLike,
    usdcAmountSpent: BigNumberish,
    sAssetAmountMinted: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    sAssetContract: string,
    usdcAmountSpent: bigint,
    sAssetAmountMinted: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    sAssetContract: string;
    usdcAmountSpent: bigint;
    sAssetAmountMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnCXPTEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    cxptAmount: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    cxptAmount: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    cxptAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnUSDCEvent {
  export type InputTuple = [
    coreAddress: AddressLike,
    userWallet: AddressLike,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [
    coreAddress: string,
    userWallet: string,
    usdcAmount: bigint
  ];
  export interface OutputObject {
    coreAddress: string;
    userWallet: string;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CORE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GATEWAY_ROLE: TypedContractMethod<[], [string], "view">;

  cxptToken: TypedContractMethod<[], [string], "view">;

  depositSynthToVault: TypedContractMethod<
    [
      userWallet: AddressLike,
      synthContract: AddressLike,
      sAssetAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositUSDC: TypedContractMethod<
    [userWallet: AddressLike, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  exchangeSAssetToUSDC: TypedContractMethod<
    [
      userWallet: AddressLike,
      sAssetContract: AddressLike,
      sAssetAmountToSpend: BigNumberish,
      usdcAmountToCredit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  exchangeUSDCToSAsset: TypedContractMethod<
    [
      userWallet: AddressLike,
      sAssetContract: AddressLike,
      usdcAmountToSpend: BigNumberish,
      sAssetAmountToMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCXPTTokenAddress: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRoleMembers: TypedContractMethod<[role: BytesLike], [string[]], "view">;

  getUSDCTokenAddress: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredSynth: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  recordFees: TypedContractMethod<
    [usdcFeeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerSynth: TypedContractMethod<
    [synthContract: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalFeesCollectedUSDC: TypedContractMethod<[], [bigint], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [userWallet: AddressLike, amount: BigNumberish, withdrawAsCxpt: boolean],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [to: AddressLike, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawSynthFromVault: TypedContractMethod<
    [
      userWallet: AddressLike,
      synthContract: AddressLike,
      sAssetAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CORE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GATEWAY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cxptToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositSynthToVault"
  ): TypedContractMethod<
    [
      userWallet: AddressLike,
      synthContract: AddressLike,
      sAssetAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositUSDC"
  ): TypedContractMethod<
    [userWallet: AddressLike, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchangeSAssetToUSDC"
  ): TypedContractMethod<
    [
      userWallet: AddressLike,
      sAssetContract: AddressLike,
      sAssetAmountToSpend: BigNumberish,
      usdcAmountToCredit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchangeUSDCToSAsset"
  ): TypedContractMethod<
    [
      userWallet: AddressLike,
      sAssetContract: AddressLike,
      usdcAmountToSpend: BigNumberish,
      sAssetAmountToMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCXPTTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleMembers"
  ): TypedContractMethod<[role: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUSDCTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredSynth"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordFees"
  ): TypedContractMethod<[usdcFeeAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerSynth"
  ): TypedContractMethod<[synthContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalFeesCollectedUSDC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [userWallet: AddressLike, amount: BigNumberish, withdrawAsCxpt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [to: AddressLike, usdcAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSynthFromVault"
  ): TypedContractMethod<
    [
      userWallet: AddressLike,
      synthContract: AddressLike,
      sAssetAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DepositedUSDC"
  ): TypedContractEvent<
    DepositedUSDCEvent.InputTuple,
    DepositedUSDCEvent.OutputTuple,
    DepositedUSDCEvent.OutputObject
  >;
  getEvent(
    key: "FeesRecorded"
  ): TypedContractEvent<
    FeesRecordedEvent.InputTuple,
    FeesRecordedEvent.OutputTuple,
    FeesRecordedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SAssetToUSDCExchanged"
  ): TypedContractEvent<
    SAssetToUSDCExchangedEvent.InputTuple,
    SAssetToUSDCExchangedEvent.OutputTuple,
    SAssetToUSDCExchangedEvent.OutputObject
  >;
  getEvent(
    key: "SynthDepositedToVault"
  ): TypedContractEvent<
    SynthDepositedToVaultEvent.InputTuple,
    SynthDepositedToVaultEvent.OutputTuple,
    SynthDepositedToVaultEvent.OutputObject
  >;
  getEvent(
    key: "SynthRegistered"
  ): TypedContractEvent<
    SynthRegisteredEvent.InputTuple,
    SynthRegisteredEvent.OutputTuple,
    SynthRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SynthWithdrawnFromVault"
  ): TypedContractEvent<
    SynthWithdrawnFromVaultEvent.InputTuple,
    SynthWithdrawnFromVaultEvent.OutputTuple,
    SynthWithdrawnFromVaultEvent.OutputObject
  >;
  getEvent(
    key: "USDCToSAssetExchanged"
  ): TypedContractEvent<
    USDCToSAssetExchangedEvent.InputTuple,
    USDCToSAssetExchangedEvent.OutputTuple,
    USDCToSAssetExchangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnCXPT"
  ): TypedContractEvent<
    WithdrawnCXPTEvent.InputTuple,
    WithdrawnCXPTEvent.OutputTuple,
    WithdrawnCXPTEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnUSDC"
  ): TypedContractEvent<
    WithdrawnUSDCEvent.InputTuple,
    WithdrawnUSDCEvent.OutputTuple,
    WithdrawnUSDCEvent.OutputObject
  >;

  filters: {
    "DepositedUSDC(address,address,uint256)": TypedContractEvent<
      DepositedUSDCEvent.InputTuple,
      DepositedUSDCEvent.OutputTuple,
      DepositedUSDCEvent.OutputObject
    >;
    DepositedUSDC: TypedContractEvent<
      DepositedUSDCEvent.InputTuple,
      DepositedUSDCEvent.OutputTuple,
      DepositedUSDCEvent.OutputObject
    >;

    "FeesRecorded(address,uint256)": TypedContractEvent<
      FeesRecordedEvent.InputTuple,
      FeesRecordedEvent.OutputTuple,
      FeesRecordedEvent.OutputObject
    >;
    FeesRecorded: TypedContractEvent<
      FeesRecordedEvent.InputTuple,
      FeesRecordedEvent.OutputTuple,
      FeesRecordedEvent.OutputObject
    >;

    "FeesWithdrawn(address,address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SAssetToUSDCExchanged(address,address,address,uint256,uint256)": TypedContractEvent<
      SAssetToUSDCExchangedEvent.InputTuple,
      SAssetToUSDCExchangedEvent.OutputTuple,
      SAssetToUSDCExchangedEvent.OutputObject
    >;
    SAssetToUSDCExchanged: TypedContractEvent<
      SAssetToUSDCExchangedEvent.InputTuple,
      SAssetToUSDCExchangedEvent.OutputTuple,
      SAssetToUSDCExchangedEvent.OutputObject
    >;

    "SynthDepositedToVault(address,address,uint256)": TypedContractEvent<
      SynthDepositedToVaultEvent.InputTuple,
      SynthDepositedToVaultEvent.OutputTuple,
      SynthDepositedToVaultEvent.OutputObject
    >;
    SynthDepositedToVault: TypedContractEvent<
      SynthDepositedToVaultEvent.InputTuple,
      SynthDepositedToVaultEvent.OutputTuple,
      SynthDepositedToVaultEvent.OutputObject
    >;

    "SynthRegistered(address,address)": TypedContractEvent<
      SynthRegisteredEvent.InputTuple,
      SynthRegisteredEvent.OutputTuple,
      SynthRegisteredEvent.OutputObject
    >;
    SynthRegistered: TypedContractEvent<
      SynthRegisteredEvent.InputTuple,
      SynthRegisteredEvent.OutputTuple,
      SynthRegisteredEvent.OutputObject
    >;

    "SynthWithdrawnFromVault(address,address,address,uint256)": TypedContractEvent<
      SynthWithdrawnFromVaultEvent.InputTuple,
      SynthWithdrawnFromVaultEvent.OutputTuple,
      SynthWithdrawnFromVaultEvent.OutputObject
    >;
    SynthWithdrawnFromVault: TypedContractEvent<
      SynthWithdrawnFromVaultEvent.InputTuple,
      SynthWithdrawnFromVaultEvent.OutputTuple,
      SynthWithdrawnFromVaultEvent.OutputObject
    >;

    "USDCToSAssetExchanged(address,address,address,uint256,uint256)": TypedContractEvent<
      USDCToSAssetExchangedEvent.InputTuple,
      USDCToSAssetExchangedEvent.OutputTuple,
      USDCToSAssetExchangedEvent.OutputObject
    >;
    USDCToSAssetExchanged: TypedContractEvent<
      USDCToSAssetExchangedEvent.InputTuple,
      USDCToSAssetExchangedEvent.OutputTuple,
      USDCToSAssetExchangedEvent.OutputObject
    >;

    "WithdrawnCXPT(address,address,uint256)": TypedContractEvent<
      WithdrawnCXPTEvent.InputTuple,
      WithdrawnCXPTEvent.OutputTuple,
      WithdrawnCXPTEvent.OutputObject
    >;
    WithdrawnCXPT: TypedContractEvent<
      WithdrawnCXPTEvent.InputTuple,
      WithdrawnCXPTEvent.OutputTuple,
      WithdrawnCXPTEvent.OutputObject
    >;

    "WithdrawnUSDC(address,address,uint256)": TypedContractEvent<
      WithdrawnUSDCEvent.InputTuple,
      WithdrawnUSDCEvent.OutputTuple,
      WithdrawnUSDCEvent.OutputObject
    >;
    WithdrawnUSDC: TypedContractEvent<
      WithdrawnUSDCEvent.InputTuple,
      WithdrawnUSDCEvent.OutputTuple,
      WithdrawnUSDCEvent.OutputObject
    >;
  };
}
