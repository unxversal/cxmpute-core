import figlet from 'figlet';
import ollama from 'ollama'; 

export async function generateFigletText(text: string): Promise<string> {

    return new Promise((resolve, reject) => {
        figlet.text(text, { font: "ANSI Shadow" }, (err, data) => { // Simplified options for this example
            if (err) {
                console.error('Figlet error:', err);
                reject(err);
                return;
            }
            if (data) {
                resolve(data);
            } else {
                reject(new Error("Figlet returned no data"));
            }
        });
    });
}

/**
 * Checks if the Ollama service is responsive by trying to list models.
 */
export async function checkOllama(): Promise<{ ok: boolean; version?: string; error?: string }> {
    try {
        // ollama.list() is a light command to check connectivity and basic function.
        // The response includes model details, but we're just checking if it succeeds.
        // To get the version, ollama.ps() or a specific version endpoint might be better
        // but ollama.list() proves it's running.
        // For actual version, you might need to hit the /api/version endpoint if ollama-js doesn't expose it directly
        // or parse it from `ollama --version` if that's preferred.
        // For now, we'll just confirm it's alive.
        await ollama.list(); // Throws an error if Ollama server is not reachable or has issues

        console.log("Ollama service is responsive.");

        return { ok: true };
    } catch (error: any) {
        console.log("Ollama service is not responsive. Error", error);
        let errorMessage = "Ollama service not responsive or not installed.";
        if (error.cause && error.cause.code === 'ECONNREFUSED') {
            errorMessage = "Ollama service is not running (Connection refused).";
        } else if (error.message) {
            errorMessage = `Ollama error: ${error.message}`;
        }
        return { ok: false, error: errorMessage };
    }
}

export const DOLPHIN_ANSI_ONE = [
  "             ,-._",
  "           _.-'  '--.",
  "         .'      _  -`\\_",
  "        / .----.`_.'----'",
  "        ;/     `",
  "       /_;",
  "",
  "    ._      ._      ._      ._",
  "_.-._)`\\_.-._)`\\_.-._)`\\_.-._)`\\_.-._)`\\_.-._"
].join("\n");

export const DOLPHIN_ANSI_TWO: string = [
  "                   YAao,",
  "                    Y8888b,",
  "                  ,oA8888888b,",
  "            ,aaad8888888888888888bo,",
  "         ,d888888888888888888888888888b,",
  "       ,888888888888888888888888888888888b,",
  "      d8888888888888888888888888888888888888,",
  "     d888888888888888888888888888888888888888b",
  "    d888888P'                    `Y888888888888,",
  "    88888P'                    Ybaaaa8888888888l",
  "   a8888'                      `Y8888P' `V888888",
  " d8888888a                                `Y8888",
  "AY/'' `\\Y8b                                 ``Y8b",
  "Y'      `YP                                    ~~",
  "         `'"
].join("\n");

export const DOLPHIN_ANSI_THREE: string = [
  "                      **********",
  "                    **********",
  "              **************",
  "        **********************",
  "      **************************",
  "      **  ************************",
  "  **********************************",
  "**************            ************",
  "        ****************      ********",
  "              ******    ****    ********",
  "                ******    ****  ********",
  "                    ****    **  ********",
  "                            **  ********",
  "                            **  ******",
  "              ******      **********",
  "                ******  **********",
  "                  ************",
  "                  ********",
  "                ******",
  "              ******"
].join("\n");

export const DOLPHIN_ANSI_FOUR: string = [
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡴⠖⠛⠉⠉⣉⣽⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣴⡟⠁⠀⠀⠀⠀⣰⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠛⠋⠉⠉⠉⠉⠉⠉⠛⠶⣦⣄⡀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⣠⠴⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⢦⣀⠀⠀⠀⠀⣀⠀⠙⢷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⡞⠀⠀⠀⢾⠆⠀⠀⠀⠀⡀⠀⠈⠀⠀⠈⠉⠉⢛⣩⡿⠇⠀⠀⠙⣷⡀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⢸⠀⠀⢀⣤⠞⠀⠀⠀⢀⠀⠓⠢⠤⠤⠴⠶⠖⠛⠋⠁⠀⠀⠀⠀⠀⠈⢿⡄⠀⠀⠀⠀⠀⠀",
  "⠀⢸⣠⢔⡿⠁⠀⠀⢀⣰⡯⠀⠒⠒⡖⠒⠒⠒⠢⠤⣄⡀⠀⠀⠀⠀⠀⠀⠈⣷⡀⠀⠀⠀⠀⠀",
  "⢀⡞⢡⠎⠀⣀⡤⠞⠉⠈⢳⣄⠀⠀⠈⠢⣄⠀⠀⠀⠀⠉⠳⢦⡀⠀⠀⠀⠀⠸⣧⠀⠀⠀⠀⠀",
  "⢸⡴⢃⡴⠋⠁⠀⠀⠀⠀⠀⠙⠳⢤⣤⣀⣬⡽⠆⠀⠀⠀⠀⠀⠹⣦⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀",
  "⠈⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡄⠀⠀⢸⡇⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⢸⡇⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡆⠀⣼⠁⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡾⠃⠀⠻⠷⣦⣄⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠟⠁⠀⠀⠀⠀⠀⠈⠹⣷⡀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢀⣠⣤⠶⠶⠶⢦⣤⣄⠸⣧",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡟⠉⠀⠀⠀⠀⠀⠀⠙⢿⣿",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿"
].join("\n");

export const DOLPHIN_ANSI_FIVE: string = [
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⣶⣶⣾⣿⠟⠉⡠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⡟⠁⣠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⢀⣾⣿⣿⣿⣿⣿⣿⠏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⢀⣾⣿⣿⣿⣿⣿⣿⡟⢠⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣸⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⠃⠀⠈⢻⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣿⣿⠿⠛⠛⠛⢿⣿⡇⢸⣿⣿⣿⣿⣿⣿⠀⠀⠀⣸⢹⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⢸⣿⣿⢸⣿⣿⣿⣿⣿⣿⠀⠀⠀⡏⠀⢿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⣿⣿⡆⣿⣿⣿⣿⣿⣿⠀⠀⠀⡇⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⢹⣿⣧⠸⣿⣿⣿⣿⣿⡆⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣧⢻⣿⣿⣿⣿⣷⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣆⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣷⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣠⣤⣤⣤⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⣀⣀⡀⠀⠀⢀⣀⣤⣶⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠻⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠻⣿⣿⣿⣿⣿⣿⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣎⠆⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⡄⠀⣀⠀⠀⠀⠀⠀⠀⠀⡤⠤⠀⠀⢠⡚⠛⠚⢿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠢⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠁⠀⠉⠀⠀⠀⣀⢰⣋⣉⡁⠀⣀⡀⠐⠋⠀⠀⠘⣿⣿⢿⣿⣭⣿⡇⠀⠀⢠⢄⣀⡠⠴⢤⠀⠀⡠⠒⠐⢳⡇⠀⠀⠀⠀⡀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠚⠀⠀⠈⠏⠢⠈⠙⡄⠀⡠⠠⠊⠁⠀⢠⣿⣿⣿⣇⣀⡰⠋⢠⠤⠄⣰⠁⠀⡸⠁⡴⠊⠉⠀⠀⡄⠀⠈⠁",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⡇⠀⠐⠒⠀⠀⠀⠀⠀⢎⠻⢿⣿⣿⣆⠀⠀⠘⠀⠀⠈⠐⠉⠀⠀⠛⠂⢀⡶⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⡄⠀⠀⠀⠀⠀⢀⠞⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠯⠉⠁⠀⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⣞⣠⡀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⠀⠣⠤⠠⠤⠐⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⠀⠀⠀⠀"
].join("\n");

export const DOLPHIN_ANSI_SIX: string = [
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣴⣾⠟⡯⠽⠉⠉⢀⣀⣭⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣤⣶⣿⣿⣟⣯⣧⣦⣢⢠⣶⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣶⠿⠿⠛⠋⠉⠙⠛⠲⠖⣿⢳⠋⠉⡓⡾⢴⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⢾⡿⣇⣿⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢿⠴⠀⠈⢻⢼⢿⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⢀⣴⡿⣯⠆⠉⣛⡻⠿⠀⠀⠀⢀⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠋⠓⠻⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⢠⣾⣛⣿⠃⠠⠖⠋⠃⠀⠀⠀⠀⠞⠛⠃⠝⢟⣢⣄⢀⢰⡒⣶⢶⣲⣾⠀⠀⠀⠀⠀⠙⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⣰⣫⡽⠿⠋⠀⠀⠀⠀⠀⠀⣤⠀⡠⢴⠄⢀⢠⣶⢶⢭⠤⢼⢿⢿⡉⣵⠟⠀⠀⠀⠀⠀⠀⠈⠻⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⣼⢿⣽⣧⠀⠀⠀⠀⠀⠀⠀⣾⣿⠈⢉⣼⣦⠈⠁⠀⠀⠀⡀⣸⣾⣿⠟⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡹⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⣼⣻⣿⣿⡿⠄⠀⠀⠀⠀⠀⠾⠛⠘⢰⣿⣿⣿⣿⣇⣄⣠⢴⣿⣻⡟⠿⠻⠓⠆⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡯⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣸⣏⣼⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⡚⠙⠛⣏⣶⡄⠠⡄⠀⠀⣤⣄⢀⠠⢤⣄⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣿⣿⡟⠁⠀⡀⣠⣤⠤⠀⢠⢠⣤⡼⡟⣻⣷⣿⣿⣿⡷⠿⠛⠛⠚⠛⠛⠿⠿⣾⣭⣨⣄⣴⣤⣀⢀⠀⠀⠀⠀⠀⠀⠑⠻⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⡇⣸⠁⠀⣾⣷⣾⠋⢠⠀⣼⣾⣸⣽⢿⣿⣿⠀⠉⢉⣿⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠳⢮⣿⡻⠿⢶⣶⣆⠀⠀⠀⠀⣽⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣿⠃⠀⠈⣿⡎⠙⣶⠉⢤⣿⡿⠋⠛⢿⣟⢯⣆⣀⡀⠀⠘⡏⡟⣶⠦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠈⠹⢿⣶⣬⢻⣧⡀⠀⣰⡰⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⣿⣳⢤⣴⠋⢀⣰⠻⢠⡿⠋⠀⠀⠀⠀⠈⠙⠛⠿⠿⢷⣼⣤⠷⠦⠶⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⡝⣿⠣⣬⣯⣽⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠹⣿⡸⠃⢀⡾⠃⣰⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣟⣢⣯⣬⢿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⣹⠃⠀⡟⢁⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣉⣿⠀⢋⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⢰⡟⢀⡞⢠⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡌⠧⠀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⢸⣿⣫⣴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣏⡀⢰⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡄⢻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣹⣾⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⣿⡿⢿⣿⣄⡀⠀⠀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣟⣻⡩⣿⣿⣾⢻⣦⡀⠀⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠉⠁⣀⡍⢣⣿⠋⡀⠈⣻⣿⣦⠀⠀⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡾⡏⡀⠀⢸⡿⣷⣾⣿⡷⢾⣧⡀⠱⠛⢧",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⢇⣿⣿⣷⠾⠟⠚⠛⠓⠛⠾⣯⣿⣗⣧⣜⣧⠀",
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢧⣼⠠"
].join("\n");