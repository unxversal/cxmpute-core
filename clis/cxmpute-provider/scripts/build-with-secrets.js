#!/usr/bin/env node
// scripts/build-with-secrets.js

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { createHash } from 'crypto';
import { fileURLToPath } from 'url';

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const CONFIG_TEMPLATE_PATH = path.join(__dirname, '../source/lib/config.template.ts');
const CONFIG_OUTPUT_PATH = path.join(__dirname, '../source/lib/config.ts');
const DIST_CLI_PATH = path.join(__dirname, '../dist/cli.js');

console.log('üîß Building Cxmpute Provider CLI with integrity hash...');

try {
    // 1. Read template file
    console.log('üìñ Reading config template...');
    let template;
    if (fs.existsSync(CONFIG_TEMPLATE_PATH)) {
        template = fs.readFileSync(CONFIG_TEMPLATE_PATH, 'utf8');
    } else {
        console.warn('‚ö†Ô∏è  config.template.ts not found, generating default template');
        template = `// autogenerated template\nexport const EMBEDDED_CONFIG = {\n    version: '1.0.0',\n    buildTime: '__BUILD_TIME_PLACEHOLDER__',\n    expectedHash: '__EXPECTED_HASH_PLACEHOLDER__'\n};`;
    }
    
    // 2. Replace placeholders
    console.log('üîÑ Preparing config...');
    let config = template
        .replace('__BUILD_TIME_PLACEHOLDER__', new Date().toISOString())
        // temporary placeholder, will be replaced after first build
        .replace('__EXPECTED_HASH_PLACEHOLDER__', 'DEV_PLACEHOLDER');
    
    // 3. Write actual config file
    fs.writeFileSync(CONFIG_OUTPUT_PATH, config);
    console.log('‚úÖ Config file generated');
    
    // 4. Clean dist directory
    console.log('üßπ Cleaning dist directory...');
    if (fs.existsSync(path.join(__dirname, '../dist'))) {
        fs.rmSync(path.join(__dirname, '../dist'), { recursive: true, force: true });
    }
    
    // 5. Build TypeScript
    console.log('üî® Compiling TypeScript...');
    execSync('npm run build', { stdio: 'inherit' });
    
    // --- Calculate build hash and embed for integrity verification ---
    console.log('üîç Calculating build hash for integrity verification...');
    const distBuffer = fs.readFileSync(DIST_CLI_PATH);
    const buildHash = createHash('sha256').update(distBuffer).digest('hex');

    console.log(`üìÑ Build hash: ${buildHash}`);

    // Replace placeholder with actual hash
    const finalConfig = config.replace('DEV_PLACEHOLDER', buildHash);
    fs.writeFileSync(CONFIG_OUTPUT_PATH, finalConfig);

    // Recompile only config.ts to update dist/lib/config.js
    console.log('üîÑ Recompiling updated config with embedded hash...');
    execSync('npm run build', { stdio: 'inherit' });
    
    // 6. Clean up config file (security)
    console.log('üßπ Removing temporary config.ts...');
    fs.unlinkSync(CONFIG_OUTPUT_PATH);
    
    console.log('üéâ Build preparation complete! Ready for packaging with pkg.');
    console.log('‚ö†Ô∏è  Temporary config.ts has been cleaned up for security');
    
} catch (error) {
    console.error('‚ùå Build failed:', error.message);
    
    // Clean up on error
    if (fs.existsSync(CONFIG_OUTPUT_PATH)) {
        fs.unlinkSync(CONFIG_OUTPUT_PATH);
    }
    
    process.exit(1);
} 