name: 🚀 Release Cxmpute Provider CLI

on:
  push:
    branches: [releases]
    paths: ['clis/cxmpute-provider/**']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CLI_PATH: 'clis/cxmpute-provider'

jobs:
  build-and-release:
    name: 🔨 Build & Release CLI Binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 Install Dependencies
        working-directory: ${{ env.CLI_PATH }}
        run: npm install
        
      - name: 🔧 Install Missing Type Definitions
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "🔍 Checking for missing type definitions..."
          
          # List of common type packages we might need
          TYPE_PACKAGES=(
            "@types/uuid"
            "@types/express"
            "@types/node"
          )
          
          # Check each package and install if missing
          for package in "${TYPE_PACKAGES[@]}"; do
            if ! npm list "$package" > /dev/null 2>&1; then
              echo "📦 Installing missing type package: $package"
              npm install --save-dev "$package" || echo "⚠️ Could not install $package (might not exist)"
            else
              echo "✅ $package already installed"
            fi
          done
          
          echo "✅ Type definitions check complete"
        
      - name: 🔍 Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from package.json or use commit hash
            VERSION="v$(jq -r '.version' ${{ env.CLI_PATH }}/package.json)"
            if [ "$VERSION" = "vnull" ]; then
              VERSION="v1.0.0-$(git rev-parse --short HEAD)"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Building version: $VERSION"
          
      - name: 🔧 Generate Config from Template
        working-directory: ${{ env.CLI_PATH }}
        env:
          PROVIDER_SECRET: ${{ secrets.CXMPUTE_PROVIDER_SECRET }}
        run: |
          if [ -z "$PROVIDER_SECRET" ]; then
            echo "❌ CXMPUTE_PROVIDER_SECRET not set in GitHub secrets"
            exit 1
          fi
          
          if [ ${#PROVIDER_SECRET} -lt 32 ]; then
            echo "❌ Provider secret must be at least 32 characters"
            exit 1
          fi
          
          echo "🔄 Creating config file..."
          
          # Create the config.ts file directly
          cat > source/lib/config.ts << EOF
          // source/lib/config.ts
          // This file is generated during build - DO NOT EDIT MANUALLY
          
          export const EMBEDDED_CONFIG = {
              providerSecret: '$PROVIDER_SECRET',
              version: '1.0.0',
              buildTime: '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
          };
          EOF
          
          echo "✅ Config file created successfully"
          
      - name: 🔨 Build TypeScript
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "🔨 Compiling TypeScript..."
          npm run build
          echo "✅ TypeScript compilation complete"
          
      - name: 📦 Install pkg
        run: npm install -g pkg
        
      - name: 🏗️ Build Binaries
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "📦 Building cross-platform binaries..."
          mkdir -p binaries
          
          # Build with clean, user-friendly names
          echo "📦 Building for Linux x64..."
          pkg dist/cli.js --target "node18-linux-x64" --output "binaries/cxmpute-provider-linux"
          
          echo "📦 Building for macOS Intel..."
          pkg dist/cli.js --target "node18-macos-x64" --output "binaries/cxmpute-provider-macos"
          
          echo "📦 Building for macOS Apple Silicon..."
          pkg dist/cli.js --target "node18-macos-arm64" --output "binaries/cxmpute-provider-macos-arm64"
          
          echo "📦 Building for Windows..."
          pkg dist/cli.js --target "node18-win-x64" --output "binaries/cxmpute-provider.exe"
          
          # Create additional copies with alternative names for user choice
          cp "binaries/cxmpute-provider-macos" "binaries/cxmpute-provider-macos-intel"
          cp "binaries/cxmpute-provider-macos-arm64" "binaries/cxmpute-provider-macos-m1"
          cp "binaries/cxmpute-provider.exe" "binaries/cxmpute-provider-windows.exe"
          
          echo "🎉 All binaries built successfully!"
          echo "📁 Generated files:"
          ls -la binaries/
          
      - name: 🗑️ Clean up Config (Security)
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "🧹 Removing config file for security..."
          rm -f source/lib/config.ts
          echo "✅ Config file cleaned up"
          
      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Cxmpute Provider CLI ${{ steps.version.outputs.version }}
          
          Transform your computer into an AI compute provider and earn rewards! This CLI automatically handles hardware detection, service orchestration, and earnings tracking.
          
          ### 📦 Download for Your Platform
          
          **macOS Users:**
          - **Intel Macs**: `cxmpute-provider-macos` or `cxmpute-provider-macos-intel`
          - **Apple Silicon (M1/M2/M3/M4)**: `cxmpute-provider-macos-arm64` or `cxmpute-provider-macos-m1`
          
          **Linux Users:**
          - **x64**: `cxmpute-provider-linux`
          
          **Windows Users:**
          - **x64**: `cxmpute-provider.exe` or `cxmpute-provider-windows.exe`
          
          ### ⚡ Quick Start
          
          **macOS/Linux:**
          ```bash
          # Download the file for your platform, then:
          chmod +x cxmpute-provider-macos    # (or cxmpute-provider-linux)
          ./cxmpute-provider-macos
          ```
          
          **Windows:**
          ```cmd
          # Just run the .exe file:
          cxmpute-provider.exe
          ```
          
          **For global access (optional):**
          ```bash
          # macOS/Linux - install globally:
          sudo mv cxmpute-provider-macos /usr/local/bin/cxmpute-provider
          cxmpute-provider  # Now works from anywhere!
          
          # Windows - add to PATH or move to Windows folder:
          move cxmpute-provider.exe C:\Windows\System32\cxmpute-provider.exe
          cxmpute-provider  # Now works from anywhere!
          ```
          
          ### 🆕 What's New
          
          - **🔒 Embedded Authentication**: No environment variables needed
          - **🖥️ Cross-Platform**: Linux, macOS (Intel & Apple Silicon), Windows
          - **⚡ Zero-Config**: Automatic hardware detection and service setup
          - **💰 Real-Time Earnings**: Live dashboard with earnings tracking
          - **🔧 Provider Tools**: Complete CLI for compute providers
          
          ### 🔐 Security
          
          This release includes embedded authentication credentials. The CLI is ready to use out of the box with secure provider registration.
          
          ### 📊 Build Info
          
          - **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: $(git rev-parse --short HEAD)
          - **Node.js**: 18.x
          - **Platforms**: Linux x64, macOS Intel/ARM64, Windows x64
          
          ### 🛟 Support
          
          - **Documentation**: [Getting Started Guide](https://github.com/${{ github.repository }}/blob/main/clis/cxmpute-provider/getting-started-provider.md)
          - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - **Email**: support@cxmpute.cloud
          EOF
          
      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'Cxmpute Provider CLI ${{ steps.version.outputs.version }}'
          body_path: release_notes.md
          files: |
            ${{ env.CLI_PATH }}/binaries/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📧 Notify Success
        run: |
          echo "🎉 Release created successfully!"
          echo "📋 Version: ${{ steps.version.outputs.version }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 