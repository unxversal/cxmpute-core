name: 🚀 Release Cxmpute Provider CLI

on:
  push:
    branches: [releases]
    paths: ['clis/cxmpute-provider/**']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write
  
env:
  CLI_PATH: 'clis/cxmpute-provider'

jobs:
  build-and-release:
    name: 🔨 Build & Release CLI Binaries
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 Install Dependencies
        working-directory: ${{ env.CLI_PATH }}
        run: npm install
        
      - name: 🔧 Install Missing Type Definitions
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "🔍 Checking for missing type definitions..."
          
          # List of common type packages we might need
          TYPE_PACKAGES=(
            "@types/uuid"
            "@types/express"
            "@types/node"
          )
          
          # Check each package and install if missing
          for package in "${TYPE_PACKAGES[@]}"; do
            if ! npm list "$package" > /dev/null 2>&1; then
              echo "📦 Installing missing type package: $package"
              npm install --save-dev "$package" || echo "⚠️ Could not install $package (might not exist)"
            else
              echo "✅ $package already installed"
            fi
          done
          
          echo "✅ Type definitions check complete"
        
      - name: 🔍 Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from package.json or use commit hash
            VERSION="v$(jq -r '.version' ${{ env.CLI_PATH }}/package.json)"
            if [ "$VERSION" = "vnull" ]; then
              VERSION="v1.0.0-$(git rev-parse --short HEAD)"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Building version: $VERSION"
          
      - name: 🔨 Build & Embed Hash
        working-directory: ${{ env.CLI_PATH }}
        run: |
          echo "🔨 Running release build with integrity hash..."
          npm run build:secure
          echo "✅ Release build complete"
          
      - name: 📦 Publish to npm
        working-directory: ${{ env.CLI_PATH }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "$NPM_TOKEN" ]; then
            echo "⚠️ NPM_TOKEN not set, skipping npm publish"
            exit 0
          fi
          
          echo "🔧 Setting up npm authentication..."
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          
          echo "📦 Publishing to npm registry..."
          npm publish --access public
          echo "✅ Published to npm registry"
          
      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          ## 🚀 Cxmpute Provider CLI ${{ steps.version.outputs.version }}
          
          Transform your computer into an AI compute provider and earn rewards! This CLI automatically handles hardware detection, service orchestration, and earnings tracking.
          
          ### 📋 Prerequisites
          
          **macOS Users:**
          - [Homebrew](https://brew.sh/) (for package management)
          - Node.js 18.x (will be installed automatically if missing)
          
          **Linux Users:**
          - Node.js 18.x (will be installed automatically if missing)
          - One of these package managers:
            - apt (Debian/Ubuntu)
            - yum (RHEL/CentOS)
            - dnf (Fedora)
          
          **Windows Users:**
          - PowerShell 5.1 or later
          - Node.js 18.x (will be installed automatically if missing)
          - Administrator privileges
          
          ### 📦 Installation
          
          \`\`\`bash
          npm install -g @unxversallabs/cxmpute-provider
          cxmpute-provider
          \`\`\`
          
          **Requirements**: Node.js 16+ required
          
          ### ⚡ Quick Start
          
          After installation, you can run the CLI from anywhere:
          \`\`\`bash
          cxmpute-provider
          \`\`\`
          
          ### 🆕 What's New
          
          - **🔒 Embedded Authentication**: No environment variables needed
          - **🖥️ Cross-Platform**: Linux, macOS (Intel & Apple Silicon), Windows
          - **⚡ Zero-Config**: Automatic hardware detection and service setup
          - **💰 Real-Time Earnings**: Live dashboard with earnings tracking
          - **🔧 Provider Tools**: Complete CLI for compute providers
          
          ### 🔐 Security
          
          This release includes embedded authentication credentials. The CLI is ready to use out of the box with secure provider registration.
          
          ### 📊 Build Info
          
          - **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: $(git rev-parse --short HEAD)
          - **Node.js**: 18.x
          - **Platforms**: Linux x64, macOS Intel/ARM64, Windows x64
          
          ### 🛟 Support
          
          - **Documentation**: [Getting Started Guide](https://github.com/${{ github.repository }}/blob/main/clis/cxmpute-provider/getting-started-provider.md)
          - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - **Email**: support@cxmpute.cloud
          EOF
          
      - name: 📦 Prepare Release Files
        run: |
          mkdir -p release_files
          cp release_notes.md release_files/
          
      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: 'Cxmpute Provider CLI ${{ steps.version.outputs.version }}'
          body_path: release_files/release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📧 Notify Success
        run: |
          echo "🎉 Release created successfully!"
          echo "📋 Version: ${{ steps.version.outputs.version }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 